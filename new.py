import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ConversationHandler, CallbackContext
import nest_asyncio  # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π –≤ Colab

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Ü–∏–∫–ª–æ–≤
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_KEY = '8018543300:AAFgcrM7-n7d1kkiO35M96PHp-UCHtVagrU'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
SELECT_MENU, SETTINGS, SELL_TICKET, CHOOSE_EVENT, CONFIRM_SALE, WAITING_FOR_PRICE = range(6)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–∏–ª–µ—Ç–æ–≤
users_data = {}
tickets_for_sale = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in users_data:
        users_data[user_id] = {'city': '', 'payment_method': '', 'phone': ''}

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"User {user_id} started the bot.")

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç", callback_data='sell_ticket')],
        [InlineKeyboardButton("–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", callback_data='market')],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
        [InlineKeyboardButton("–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data='privacy_policy')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç"
async def sell_ticket(update: Update, context: CallbackContext):
    logger.info("User clicked '–ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç'")

    explanation = """
    üéüÔ∏è **–ö–∞–∫ –ø—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç**:
    
    1Ô∏è‚É£ **–®–∞–≥ 1**: –°–∫–∏–Ω—å—Ç–µ —Ñ–∞–π–ª —Å –±–∏–ª–µ—Ç–æ–º –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (—Ñ–æ—Ç–æ, —Å–∫–∞–Ω).
    
    2Ô∏è‚É£ **–®–∞–≥ 2**: –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç.
    
    3Ô∏è‚É£ **–®–∞–≥ 3**: –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞—à –±–∏–ª–µ—Ç –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É.
    
    –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–ª–∞—Ç—É.
    """
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(explanation)

    return WAITING_FOR_PRICE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –±–∏–ª–µ—Ç–æ–º
async def receive_ticket_file(update: Update, context: CallbackContext):
    if update.message.document:
        user_id = update.message.from_user.id
        ticket_file = update.message.document

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–ª–µ—Ç
        tickets_for_sale[user_id] = {'file_id': ticket_file.file_id}
        
        logger.info(f"User {user_id} uploaded a ticket file.")

        await update.message.reply_text("–ë–∏–ª–µ—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–æ–¥–∞—Ç—å:")

        return WAITING_FOR_PRICE
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –±–∏–ª–µ—Ç–æ–º.")
        return WAITING_FOR_PRICE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –±–∏–ª–µ—Ç–∞
async def receive_price(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    ticket_price = update.message.text

    try:
        ticket_price = float(ticket_price)
        if ticket_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000).")
        return WAITING_FOR_PRICE

    if user_id in tickets_for_sale:
        tickets_for_sale[user_id]['price'] = ticket_price
        await update.message.reply_text(f"–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ü–µ–Ω—É –Ω–∞ –±–∏–ª–µ—Ç: {ticket_price}‚ÇΩ. –ë–∏–ª–µ—Ç –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É.")
        
        logger.info(f"User {user_id} set the price: {ticket_price}‚ÇΩ")

        await update.message.reply_text(f"–ë–∏–ª–µ—Ç –Ω–∞ —Å—É–º–º—É {ticket_price}‚ÇΩ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ!")

    return SELECT_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞"
async def show_marketplace(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if not tickets_for_sale:
        await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.")
        return

    available_tickets = "\n".join(
        [f"–ë–∏–ª–µ—Ç: {ticket['file_id']} - –¶–µ–Ω–∞: {ticket['price']}‚ÇΩ" for ticket in tickets_for_sale.values()]
    )
    await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã:\n{available_tickets}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
async def settings(update: Update, context: CallbackContext):
    logger.info("User clicked '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'")

    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥", callback_data='choose_city')],
        [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data='set_payment')],
        [InlineKeyboardButton("–°–≤—è–∑—å —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data='support')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=reply_markup)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    application = Application.builder().token(API_KEY).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELL_TICKET: [CallbackQueryHandler(sell_ticket, pattern='sell_ticket')],
            WAITING_FOR_PRICE: [MessageHandler(filters.Document.ALL, receive_ticket_file), MessageHandler(filters.TEXT & ~filters.COMMAND, receive_price)],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    application.add_handler(CallbackQueryHandler(show_marketplace, pattern='market'))
    application.add_handler(CallbackQueryHandler(settings, pattern='settings'))

    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler
    application.add_handler(conversation_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –≤ Colab
    await application.run_polling()

# –í Google Colab –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π:
await main()
