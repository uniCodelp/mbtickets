import logging
import sys

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
except ModuleNotFoundError:
    sys.stderr.write("–ú–æ–¥—É–ª—å 'telegram' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π 'pip install python-telegram-bot' –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
class CustomFormatter(logging.Formatter):
    COLORS = {
        "DEBUG": "\033[92m",
        "INFO": "\033[94m",
        "WARNING": "\033[93m",
        "ERROR": "\033[91m",
        "CRITICAL": "\033[95m"
    }
    RESET = "\033[0m"

    def format(self, record):
        log_color = self.COLORS.get(record.levelname, self.RESET)
        record.msg = f"{log_color}{record.msg}{self.RESET}"
        return super().format(record)

formatter = CustomFormatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler = logging.StreamHandler()
handler.setFormatter(formatter)
logger = logging.getLogger(__name__)
logger.addHandler(handler)
logger.setLevel(logging.INFO)

# –í–∞—à Telegram API –∫–ª—é—á
API_KEY = "8018543300:AAFgcrM7-n7d1kkiO35M96PHp-UCHtVagrU"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç", callback_data="sell_ticket")],
        [InlineKeyboardButton("üìú –ü–æ–ª–∏—Ç. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="policy")],
        [InlineKeyboardButton("üè∑Ô∏è –¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", callback_data="marketplace")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    if query.data == "settings":
        keyboard = [
            [InlineKeyboardButton("üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="payment_details")],
            [InlineKeyboardButton("üåç –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞", callback_data="select_city")],
            [InlineKeyboardButton("üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/monekeny")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=reply_markup)

    elif query.data == "payment_details":
        user_id = query.from_user.id
        user_payment_data = user_data.get(user_id, {}).get("payment_details")
        if user_payment_data:
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data="edit_payment_details")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data="settings")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö?", reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("–°–ë–ü", callback_data="sbp")],
                [InlineKeyboardButton("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", callback_data="card")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup)

    elif query.data == "sbp":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –±–∞–Ω–∫—É:")
        context.user_data["awaiting_sbp_phone"] = True

    elif query.data == "card":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:")
        context.user_data["awaiting_card_number"] = True

    elif query.data == "select_city":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")
        context.user_data["awaiting_city"] = True

    elif query.data.startswith("bank_"):
        bank_name = query.data.split("_")[1]
        user_id = query.from_user.id
        user_data[user_id]["payment_details"]["bank"] = bank_name
        await query.edit_message_text(f"–í–∞—à –≤—ã–±–æ—Ä ({bank_name}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [InlineKeyboardButton("üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="payment_details")],
            [InlineKeyboardButton("üåç –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞", callback_data="select_city")],
            [InlineKeyboardButton("üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/monekeny")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=reply_markup)

    elif query.data == "main_menu":
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç", callback_data="sell_ticket")],
            [InlineKeyboardButton("üìú –ü–æ–ª–∏—Ç. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="policy")],
            [InlineKeyboardButton("üè∑Ô∏è –¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", callback_data="marketplace")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
            reply_markup=reply_markup
        )

    elif query.data == "edit_payment_details":
        keyboard = [
            [InlineKeyboardButton("–°–ë–ü", callback_data="sbp")],
            [InlineKeyboardButton("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", callback_data="card")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if context.user_data.get("awaiting_sbp_phone"):
        phone = update.message.text
        user_data.setdefault(user_id, {})["payment_details"] = {"method": "–°–ë–ü", "phone": phone}

        keyboard = [
            [InlineKeyboardButton(bank, callback_data=f"bank_{bank}") for bank in ["–°–±–µ—Ä", "–¢-–±–∞–Ω–∫", "–í–¢–ë"]],
            [InlineKeyboardButton(bank, callback_data=f"bank_{bank}") for bank in ["–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–†–∞–π—Ñ–∞–π–∑–µ–Ω"]],
            [InlineKeyboardButton(bank, callback_data=f"bank_{bank}") for bank in ["OZON –ë–∞–Ω–∫", "–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫"]]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=reply_markup)
        context.user_data["awaiting_sbp_phone"] = False

    elif context.user_data.get("awaiting_card_number"):
        card_number = update.message.text
        user_data.setdefault(user_id, {})["payment_details"] = {"method": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", "card": card_number}
        await update.message.reply_text("–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        context.user_data["awaiting_card_number"] = False

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [InlineKeyboardButton("üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="payment_details")],
            [InlineKeyboardButton("üåç –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞", callback_data="select_city")],
            [InlineKeyboardButton("üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/monekeny")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=reply_markup)

    elif context.user_data.get("awaiting_city"):
        city = update.message.text
        user_data.setdefault(user_id, {})["city"] = city
        await update.message.reply_text(f"–í–∞—à –≥–æ—Ä–æ–¥ ({city}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        context.user_data["awaiting_city"] = False

        keyboard = [
            [InlineKeyboardButton("üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="payment_details")],
            [InlineKeyboardButton("üåç –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞", callback_data="select_city")],
            [InlineKeyboardButton("üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/monekeny")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=reply_markup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = ApplicationBuilder().token(API_KEY).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(menu_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if str(e).startswith("asyncio.run() cannot be called from a running event loop"):
            logger.warning("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Å—Ä–µ–¥–µ, –≥–¥–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫.")
            from telegram.ext import asyncio
            asyncio.new_event_loop
