import logging
import sys
import os

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
    from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
except ModuleNotFoundError:
    sys.stderr.write("–ú–æ–¥—É–ª—å 'telegram' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π 'pip install python-telegram-bot' –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
class CustomFormatter(logging.Formatter):
    COLORS = {
        "DEBUG": "\033[92m",
        "INFO": "\033[94m",
        "WARNING": "\033[93m",
        "ERROR": "\033[91m",
        "CRITICAL": "\033[95m"
    }
    RESET = "\033[0m"

    def format(self, record):
        log_color = self.COLORS.get(record.levelname, self.RESET)
        record.msg = f"{log_color}{record.msg}{self.RESET}"
        return super().format(record)

formatter = CustomFormatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler = logging.StreamHandler()
handler.setFormatter(formatter)
logger = logging.getLogger(__name__)
logger.addHandler(handler)
logger.setLevel(logging.INFO)

# –í–∞—à Telegram API –∫–ª—é—á
API_KEY = "8018543300:AAFgcrM7-n7d1kkiO35M96PHp-UCHtVagrU"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
TICKETS_DIR = "tickets"
if not os.path.exists(TICKETS_DIR):
    os.makedirs(TICKETS_DIR)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
marketplace_data = []  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –±–∏–ª–µ—Ç–∞
def generate_ticket_id():
    return f"ticket_{len(marketplace_data) + 1}"

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    keyboard = [
        [InlineKeyboardButton("üè∑Ô∏è –¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", callback_data="marketplace_menu")],
        [InlineKeyboardButton("üìú –ü–æ–ª–∏—Ç. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="policy")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    if query.data == "settings":
        keyboard = [
            [InlineKeyboardButton("üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="payment_details")],
            [InlineKeyboardButton("üåç –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞", callback_data="select_city")],
            [InlineKeyboardButton("üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/monekeny")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=reply_markup)

    elif query.data == "main_menu":
        await start(update, context)

    elif query.data == "marketplace_menu":
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç", callback_data="sell_ticket")],
            [InlineKeyboardButton("üìú –¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", callback_data="marketplace")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    elif query.data == "marketplace":
        if marketplace_data:
            ticket_buttons = [
                [InlineKeyboardButton(f"{ticket['name']} - {ticket['price']} —Ä—É–±.", callback_data=f"market_details_{i}")]
                for i, ticket in enumerate(marketplace_data)
            ]
            ticket_buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="marketplace_menu")])

            reply_markup = InlineKeyboardMarkup(ticket_buttons)
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤:", reply_markup=reply_markup)
        else:
            await query.edit_message_text("–ù–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤.", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="marketplace_menu")]
            ]))

    elif query.data.startswith("market_details_"):
        index = int(query.data.split("_")[2])
        ticket = marketplace_data[index]
        event_details = (
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ:\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {ticket['name']}\n"
            f"–¶–µ–Ω–∞: {ticket['price']} —Ä—É–±.\n"
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –±–∏–ª–µ—Ç?"
        )
        keyboard = [
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy_ticket_{index}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="marketplace")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(event_details, reply_markup=reply_markup)

    elif query.data.startswith("buy_ticket_"):
        index = int(query.data.split("_")[2])
        ticket = marketplace_data.pop(index)
        ticket_folder = os.path.join(TICKETS_DIR, ticket["id"])
        ticket_file_path = os.path.join(ticket_folder, "ticket_file")

        await query.edit_message_text(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç \"{ticket['name']}\" –∑–∞ {ticket['price']} —Ä—É–±."
        )
        if os.path.exists(ticket_file_path):
            with open(ticket_file_path, "rb") as f:
                await query.message.reply_document(document=f, caption=f"–í–∞—à –±–∏–ª–µ—Ç: {ticket['name']}")
        await start(update, context)

    elif query.data == "sell_ticket":
        await query.edit_message_text(
            "–ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–∞:\n"
            "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ö–æ–Ω—Ü–µ—Ä—Ç XYZ\").\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞:"
        )
        context.user_data["awaiting_ticket_name"] = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.message.from_user.id

    if context.user_data.get("awaiting_ticket_name"):
        ticket_name = update.message.text
        context.user_data["ticket_name"] = ticket_name
        context.user_data["awaiting_ticket_name"] = False

        await update.message.reply_text(
            "–í–∞—à –±–∏–ª–µ—Ç: {ticket_name}\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:"
        )
        context.user_data["awaiting_ticket_price"] = True

    elif context.user_data.get("awaiting_ticket_price"):
        try:
            ticket_price = int(update.message.text)
            ticket_name = context.user_data.get("ticket_name", "")

            ticket_id = generate_ticket_id()
            marketplace_data.append({"id": ticket_id, "name": ticket_name, "price": ticket_price})

            await update.message.reply_text(
                f"–ë–∏–ª–µ—Ç \"{ticket_name}\" —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É –ø–æ —Ü–µ–Ω–µ {ticket_price} —Ä—É–±.!"
            )
            context.user_data["awaiting_ticket_price"] = False
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = ApplicationBuilder().token(API_KEY).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(menu_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await application.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    import asyncio

    nest_asyncio.apply()
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except RuntimeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
